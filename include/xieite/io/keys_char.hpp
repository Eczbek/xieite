#ifndef DETAIL_XIEITE_HEADER_IO_KEYS_CHAR
#	define DETAIL_XIEITE_HEADER_IO_KEYS_CHAR
#
#	include <cstddef>
#	include <utility>
#	include "../data/make_sparse_array.hpp"
#	include "../io/keys.hpp"
#	include "../math/sign_cast.hpp"

namespace xieite {
	[[nodiscard]] constexpr char keys_char(xieite::keys key) noexcept {
		static constexpr auto map = xieite::make_sparse_array<xieite::keys, char>({
			{ xieite::keys::space, ' ' },
			{ xieite::keys::bang, '!' },
			{ xieite::keys::quote, '\"' },
			{ xieite::keys::hash, '#' },
			{ xieite::keys::dollar, '$' },
			{ xieite::keys::percent, '%' },
			{ xieite::keys::ampersand, '&' },
			{ xieite::keys::apostrophe, '\'' },
			{ xieite::keys::left_paren, '(' },
			{ xieite::keys::right_paren, ')' },
			{ xieite::keys::star, '*' },
			{ xieite::keys::plus, '+' },
			{ xieite::keys::comma, ',' },
			{ xieite::keys::dash, '-' },
			{ xieite::keys::dot, '.' },
			{ xieite::keys::slash, '/' },
			{ xieite::keys::_0, '0' },
			{ xieite::keys::_1, '1' },
			{ xieite::keys::_2, '2' },
			{ xieite::keys::_3, '3' },
			{ xieite::keys::_4, '4' },
			{ xieite::keys::_5, '5' },
			{ xieite::keys::_6, '6' },
			{ xieite::keys::_7, '7' },
			{ xieite::keys::_8, '8' },
			{ xieite::keys::_9, '9' },
			{ xieite::keys::colon, ':' },
			{ xieite::keys::semicolon, ';' },
			{ xieite::keys::less, '<' },
			{ xieite::keys::equal, '=' },
			{ xieite::keys::greater, '>' },
			{ xieite::keys::hook, '?' },
			{ xieite::keys::strudel, '@' },
			{ xieite::keys::A, 'A' },
			{ xieite::keys::B, 'B' },
			{ xieite::keys::C, 'C' },
			{ xieite::keys::D, 'D' },
			{ xieite::keys::E, 'E' },
			{ xieite::keys::F, 'F' },
			{ xieite::keys::G, 'G' },
			{ xieite::keys::H, 'H' },
			{ xieite::keys::I, 'I' },
			{ xieite::keys::J, 'J' },
			{ xieite::keys::K, 'K' },
			{ xieite::keys::L, 'L' },
			{ xieite::keys::M, 'M' },
			{ xieite::keys::N, 'N' },
			{ xieite::keys::O, 'O' },
			{ xieite::keys::P, 'P' },
			{ xieite::keys::Q, 'Q' },
			{ xieite::keys::R, 'R' },
			{ xieite::keys::S, 'S' },
			{ xieite::keys::T, 'T' },
			{ xieite::keys::U, 'U' },
			{ xieite::keys::V, 'V' },
			{ xieite::keys::W, 'W' },
			{ xieite::keys::X, 'X' },
			{ xieite::keys::Y, 'Y' },
			{ xieite::keys::Z, 'Z' },
			{ xieite::keys::left_bracket, '[' },
			{ xieite::keys::backslash, '\\' },
			{ xieite::keys::right_bracket, ']' },
			{ xieite::keys::caret, '^' },
			{ xieite::keys::underscore, '_' },
			{ xieite::keys::grave, '`' },
			{ xieite::keys::a, 'a' },
			{ xieite::keys::b, 'b' },
			{ xieite::keys::c, 'c' },
			{ xieite::keys::d, 'd' },
			{ xieite::keys::e, 'e' },
			{ xieite::keys::f, 'f' },
			{ xieite::keys::g, 'g' },
			{ xieite::keys::h, 'h' },
			{ xieite::keys::i, 'i' },
			{ xieite::keys::j, 'j' },
			{ xieite::keys::k, 'k' },
			{ xieite::keys::l, 'l' },
			{ xieite::keys::m, 'm' },
			{ xieite::keys::n, 'n' },
			{ xieite::keys::o, 'o' },
			{ xieite::keys::p, 'p' },
			{ xieite::keys::q, 'q' },
			{ xieite::keys::r, 'r' },
			{ xieite::keys::s, 's' },
			{ xieite::keys::t, 't' },
			{ xieite::keys::u, 'u' },
			{ xieite::keys::v, 'v' },
			{ xieite::keys::w, 'w' },
			{ xieite::keys::x, 'x' },
			{ xieite::keys::y, 'y' },
			{ xieite::keys::z, 'z' },
			{ xieite::keys::left_brace, '{' },
			{ xieite::keys::pipe, '|' },
			{ xieite::keys::right_brace, '}' },
			{ xieite::keys::tilde, '~' }
		});
		return map[xieite::sign_cast<std::size_t>(std::to_underlying(key))];
	}
}

#endif
